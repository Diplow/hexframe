---
description: Creating cursor rules
globs: .cursor/rules/*.mdc
alwaysApply: false
---
---
description: Creating cursor rules
globs: .cursor/rules/*.mdc
alwaysApply: false
---
# Cursor Rules Creation Guidelines

## Purpose
Cursor rules provide documentation and guidelines for AI assistants to follow when working with the codebase. They ensure consistent patterns, practices, and approaches across the project.

## Location
- All cursor rules must be stored in the `.cursor/rules` directory
- Each rule should be a separate Markdown file with the `.mdc` extension
- The filename should reflect the rule's purpose (e.g., `back-api-trpc.mdc` for tRPC API guidelines)

## Before Creating a New Rule
1. Check if a relevant rule already exists that could be modified instead
2. Search for related rules to ensure no contradictions or duplications
3. Consider if this guidance belongs in an existing rule or warrants a new one

## Naming Conventions
Current cursor rules follow these naming patterns:
- `back-{layer}-{topic}.mdc`: Backend development guidelines for specific layers/components
  - Example: `back-api-trpc.mdc` - Backend API layer tRPC implementation guidelines
  - Example: `back-domain-objects.mdc` - Backend domain objects implementation
- `planning-{scope}.mdc`: Guidelines for planning/architecting features
  - Example: `planning-feature-back.mdc` - Planning backend features
- `refactoring-{scope}.mdc`: Guidelines for refactoring operations
  - Example: `refactoring-back-domain-objects.mdc` - Domain objects refactoring
- `mcp-{topic}.mdc`: My Coding Partner integration guidelines
  - Example: `mcp-github.mdc` - GitHub integration guidelines
- `front-{topic}.mdc`: Frontend development guidelines
  - Example: `front-architecture.mdc` - Frontend architecture guidelines
- `cursor-rules-{topic}.mdc`: Meta-rules about cursor rules themselves
  - Example: `cursor-rules-creation.mdc` - Guidelines for creating cursor rules
  - Example: `cursor-rules-modification.mdc` - Guidelines for modifying cursor rules

When adding a new rule, try to follow existing patterns. If your rule doesn't fit these patterns, create a new category and update this document to include it.

## Rule Content Structure
A cursor rule should generally include:

1. **Title**: Clear, descriptive title that reflects the rule's purpose
2. **Overview/Purpose**: Brief explanation of what the rule covers
3. **Guidelines/Principles**: Core principles or high-level guidelines
4. **Examples**: Concrete examples showing correct implementation
5. **Code Snippets**: Where applicable, show example code
6. **Edge Cases**: Address common edge cases or exceptions
7. **References**: If applicable, link to external documentation

## Format
- Use Markdown formatting for readability
- Use headings (##, ###) to organize content
- Use code blocks (```) for code examples
- Use bullet points for lists of related items
- Keep the rule concise but comprehensive

## Updating Rule Organization
If you create a rule that doesn't fit the existing naming conventions:
1. Create a new naming category in this document
2. Add an example of your new rule
3. Document the purpose of this new category
4. Consider if other existing rules should be renamed to follow the new pattern

## Rule Validation
After creating a new rule:
1. Review for clarity and completeness
2. Ensure it doesn't contradict existing rules
3. Verify all code examples are correct and follow project conventions
4. Make sure the guidance is specific enough to be useful