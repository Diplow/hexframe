---
description: Planning a backend feature
globs: 
alwaysApply: false
---
---
description: Planning a backend feature
globs: 
alwaysApply: false
---
# Backend Feature Planning Template

## Overview
Create a detailed implementation plan for backend features as a markdown file that will serve as a prompt for AI implementation. The plan should be comprehensive yet concise, focusing on the specific implementation details without repeating information already covered in the cursor rules.

## Planning Structure

### 1. Feature Description
- Provide a clear, concise description of the feature
- Explain the business value and user benefits
- Define the scope and boundaries of the feature
- List any dependencies or prerequisites

### 2. Domain Model
- Define the core domain concepts and their relationships
- Specify the key attributes and behaviors of each domain object
- Identify aggregates, entities, and value objects
- Describe the domain invariants and business rules

### 3. Implementation Layers
For each layer, provide specific implementation details without repeating patterns already defined in cursor rules:

#### 3.1 Domain Objects
- List all required domain objects (aggregates, entities)
- For each object, specify:
  - Unique attributes beyond the standard pattern
  - Validation rules specific to this feature
  - Business logic methods to be implemented
  - Relationships with other domain objects

#### 3.2 Domain Services
- Define service methods and their responsibilities
- Specify input validation requirements
- Describe how the service orchestrates actions and repositories
- Note any special error handling requirements

#### 3.3 Database Schema
- List new tables or modifications to existing tables
- Specify column names, types, and constraints
- Define relationships and foreign keys
- Note any indexes or performance considerations

#### 3.4 Domain Repositories
- Define repository interfaces specific to this feature
- Specify any custom query methods beyond CRUD
- Note any performance considerations for queries

#### 3.5 Domain Actions
- List the core business operations to implement
- Specify the parameters and return values
- Describe the business logic and validation rules
- Note any transactional requirements

#### 3.6 Infrastructure Repositories
- Specify implementation details for repository interfaces
- Note any ORM-specific considerations
- Describe query optimization strategies if applicable

#### 3.7 API Layer
- Define the API endpoints (routes, methods)
- Specify request/response schemas
- Describe authentication and authorization requirements
- Note any rate limiting or caching considerations

### 4. Implementation Steps
- Break down the implementation into ordered, actionable steps
- Specify dependencies between steps
- Suggest an implementation order that minimizes integration issues

### 5. Testing Strategy
- Outline unit testing requirements for domain logic
- Specify integration testing needs for repositories
- Define API testing scenarios
- Note any performance testing considerations

### 6. Acceptance Criteria
- List specific, testable criteria that define when the feature is complete
- Include both functional and non-functional requirements
- Specify edge cases and error scenarios to handle

## Key Principles
- Be specific and actionable without repeating standard patterns
- Focus on what's unique about this feature
- Provide enough detail for implementation without ambiguity
- Maintain consistency with existing architecture
- Consider performance, security, and scalability
- Ensure the plan is complete enough to serve as an AI implementation prompt