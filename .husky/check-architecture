#!/bin/sh

# Architecture Boundary Check
# Simple checks: line counts and required files
# Usage: ./check-architecture [path]
# Default path: src

set -e

# Get target path from argument or default to src
TARGET_PATH=${1:-src}

echo "üèóÔ∏è Checking architectural boundaries in $TARGET_PATH..."

# Configuration
COMPLEXITY_THRESHOLD=1000  # Lines before requiring subsystem structure
DOC_THRESHOLD=500          # Lines before requiring README

# Count TypeScript lines in a directory
# Recursive, but stops at subsystem boundaries (folders with interface.ts)
count_ts_lines() {
  local dir=$1
  local total=0
  
  # Count direct files in this directory
  local direct_lines=$(find "$dir" -maxdepth 1 -type f \( -name "*.ts" -o -name "*.tsx" \) -not -name "*.test.*" -not -name "*.spec.*" 2>/dev/null | \
    xargs wc -l 2>/dev/null | \
    tail -1 | \
    awk '{print $1}' || echo 0)
  
  total=$((total + direct_lines))
  
  # For each subdirectory, check if it's a subsystem boundary
  for subdir in "$dir"/*; do
    if [ -d "$subdir" ]; then
      # If subfolder has interface.ts, it's its own subsystem - don't count it
      if [ -f "$subdir/interface.ts" ]; then
        continue  # Skip this subfolder, it's a separate subsystem
      else
        # Not a subsystem, count its lines recursively
        subdir_lines=$(count_ts_lines "$subdir")
        total=$((total + subdir_lines))
      fi
    fi
  done
  
  echo $total
}

ERRORS=""
WARNINGS=""

# Check all directories for line count
echo "Scanning directories (recursive, stopping at subsystem boundaries)..."
for dir in $(find "$TARGET_PATH" -type d -not -path "*/node_modules/*" -not -path "*/.git/*" -not -path "*/dist/*" -not -path "*/build/*"); do
  # Skip if this is a child of a subsystem (would be double-counted)
  parent_dir=$(dirname "$dir")
  if [ -f "$parent_dir/interface.ts" ]; then
    if [ "$parent_dir" != "$dir" ]; then
      continue  # Skip children of subsystems
    fi
  fi
  
  lines=$(count_ts_lines "$dir")
  
  if [ "$lines" -gt "$COMPLEXITY_THRESHOLD" ]; then
    # Complex folder - needs full subsystem structure
    missing=""
    [ ! -f "$dir/interface.ts" ] && [ ! -d "$dir/types" ] && missing="$missing interface.ts"
    [ ! -f "$dir/README.md" ] && missing="$missing README.md"
    [ ! -f "$dir/ARCHITECTURE.md" ] && missing="$missing ARCHITECTURE.md"
    [ ! -f "$dir/dependencies.json" ] && missing="$missing dependencies.json"
    
    if [ -n "$missing" ]; then
      ERRORS="${ERRORS}\n‚ùå $dir ($lines lines) missing:$missing"
    fi
    
  elif [ "$lines" -gt "$DOC_THRESHOLD" ]; then
    # Medium complexity - just needs README
    if [ ! -f "$dir/README.md" ]; then
      WARNINGS="${WARNINGS}\n‚ö†Ô∏è  $dir ($lines lines) - missing README.md"
    fi
  fi
done

# Check that subsystems (with interface.ts) have all required files
echo "Checking subsystems for completeness..."
for interface_file in $(find "$TARGET_PATH" -name "interface.ts" -not -path "*/node_modules/*"); do
  dir=$(dirname "$interface_file")
  
  missing=""
  [ ! -f "$dir/README.md" ] && missing="$missing README.md"
  [ ! -f "$dir/ARCHITECTURE.md" ] && missing="$missing ARCHITECTURE.md"
  [ ! -f "$dir/dependencies.json" ] && missing="$missing dependencies.json"
  
  if [ -n "$missing" ]; then
    ERRORS="${ERRORS}\n‚ùå $dir has interface.ts but missing:$missing"
  fi
done

# Check import boundaries for subsystems with interface.ts
echo "Checking import boundaries..."
for interface_file in $(find "$TARGET_PATH" -name "interface.ts" -not -path "*/node_modules/*"); do
  subsystem_dir=$(dirname "$interface_file")
  subsystem_name=$(basename "$subsystem_dir")
  
  # Find all imports to this subsystem from outside
  # Pattern: import ... from "~/.../$subsystem_name/..."
  # But exclude imports from the interface itself and from within the same subsystem
  violations=$(find src -name "*.ts" -o -name "*.tsx" | \
    xargs grep -l "from [\"']~/.*/$subsystem_name/" 2>/dev/null | \
    grep -v "^$subsystem_dir/" | \
    xargs grep -H "from [\"']~/.*/$subsystem_name/[^\"']*[\"']" 2>/dev/null | \
    grep -v "/$subsystem_name/interface[\"']" || true)
  
  if [ -n "$violations" ]; then
    ERRORS="${ERRORS}\n‚ùå External imports bypass $subsystem_name/interface.ts:"
    # Format violations nicely  
    while IFS= read -r violation; do
      if [ -n "$violation" ]; then
        file_and_line=$(echo "$violation" | cut -d: -f1,2)
        import_line=$(echo "$violation" | cut -d: -f3-)
        ERRORS="${ERRORS}\n  $file_and_line: $import_line"
      fi
    done << EOF
$violations
EOF
  fi
done

# Report results
if [ -n "$ERRORS" ]; then
  echo "\nüö® Architecture violations:"
  echo "$ERRORS"
  echo "\nFolders over $COMPLEXITY_THRESHOLD lines need:"
  echo "- interface.ts (or types/ folder)"
  echo "- dependencies.json"
  echo "- README.md"
  echo "- ARCHITECTURE.md"
  echo "\nSubsystems with interface.ts must be imported ONLY through interface.ts"
  echo "External imports should use: import { X } from '~/path/to/subsystem/interface'"
  exit 1
fi

if [ -n "$WARNINGS" ]; then
  echo "\n‚ö†Ô∏è  Warnings:"
  echo "$WARNINGS"
fi

echo "‚úÖ Architecture check passed!"