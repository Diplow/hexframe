CREATE TABLE IF NOT EXISTS "vde_base_items" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "vde_base_items_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"title" text NOT NULL,
	"descr" text NOT NULL,
	"link" text,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "vde_hex_maps" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "vde_hex_maps_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"center_id" integer NOT NULL,
	"owner_id" integer NOT NULL,
	"colors" jsonb NOT NULL,
	"radius" integer NOT NULL,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL
);
--> statement-breakpoint
CREATE TABLE IF NOT EXISTS "vde_map_items" (
	"id" integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "vde_map_items_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1),
	"map_id" integer,
	"origin_id" integer,
	"parent_id" integer,
	"row" integer NOT NULL,
	"col" integer NOT NULL,
	"path" varchar(10) DEFAULT '' NOT NULL,
	"size" varchar(2) NOT NULL,
	"color" varchar(10) NOT NULL,
	"lightness" integer NOT NULL,
	"ref_item_type" varchar(10) NOT NULL,
	"ref_item_id" integer NOT NULL,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT now() NOT NULL
);
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "vde_hex_maps" ADD CONSTRAINT "vde_hex_maps_center_id_vde_map_items_id_fk" FOREIGN KEY ("center_id") REFERENCES "public"."vde_map_items"("id") ON DELETE restrict ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "vde_map_items" ADD CONSTRAINT "vde_map_items_map_id_vde_hex_maps_id_fk" FOREIGN KEY ("map_id") REFERENCES "public"."vde_hex_maps"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "vde_map_items" ADD CONSTRAINT "vde_map_items_origin_id_vde_map_items_id_fk" FOREIGN KEY ("origin_id") REFERENCES "public"."vde_map_items"("id") ON DELETE set null ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "vde_map_items" ADD CONSTRAINT "vde_map_items_parent_id_vde_map_items_id_fk" FOREIGN KEY ("parent_id") REFERENCES "public"."vde_map_items"("id") ON DELETE set null ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "vde_map_items" ADD CONSTRAINT "vde_map_items_ref_item_id_vde_base_items_id_fk" FOREIGN KEY ("ref_item_id") REFERENCES "public"."vde_base_items"("id") ON DELETE restrict ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "hex_map_center_idx" ON "vde_hex_maps" USING btree ("center_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "hex_map_owner_idx" ON "vde_hex_maps" USING btree ("owner_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "map_item_map_idx" ON "vde_map_items" USING btree ("map_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "map_item_origin_idx" ON "vde_map_items" USING btree ("origin_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "map_item_parent_idx" ON "vde_map_items" USING btree ("parent_id");--> statement-breakpoint
CREATE INDEX IF NOT EXISTS "map_item_ref_item_idx" ON "vde_map_items" USING btree ("ref_item_id");--> statement-breakpoint
CREATE UNIQUE INDEX IF NOT EXISTS "map_item_unique_coords_idx" ON "vde_map_items" USING btree ("map_id","row","col","path");